#Import pandas
import pandas as pd

#Create dataframe by hand
frame = pd.DataFrame({'Yes': [50, 21], 'No': [131, 2]})
print(frame)

#Create series by hand
series = pd.Series([1, 2, 3, 4, 5], index = ['Hell', 'Purgatory', 'KB', 'New College', 'Pizza'], name = 'Places I like')
print("\n") 
print(series)

#import dataframes, usually through comma-seperated-files (.csv) 
#frame = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col = 0)

#check the shape of the frame
frame.shape

#see the first five rows (elements) of the frame
frame.head()

#upload frame to csv
frame.to_csv("file_name.csv")

#access properties of frames
frame.Yes
frame["Yes"] #allows accessing series with reserved characters in them


#pandas indexing
frame.iloc[0]
#row first, column second
#access column
frame.iloc[:, 0]
frame.iloc[:3, 0]

#a list can be parsed as well
frame.iloc[[1, 2, 3],0]

#...as well as negative indexes
frame.iloc[-5:]

#label-based indexing
reviews.loc[0, 'country']
reviews.loc[:, ['country', 'points']]

#loc indexes inclusively
#[0: 10] = 0,...,10

#iloc indexes exclusively
#[0: 10] = 0,...,9

#conditional selection
#frame["Yes"] == 50

#the results can be accessed via .loc
frame.loc[frame["Yes"] == 50]

#check if a data value is in a list of values
frame.loc[frame["Yes"].isin(['50','2'])]

#check for null or notnull
frame.loc[frame["Yes"].isnull()]
frame.loc[frame["Yes"].notnull()]

#Data can be assigned easily
reviews['critic'] = 'everyone'
reviews['critic']

reviews['index_backwards'] = range(len(reviews), 0, -1)
reviews['index_backwards']

#reviews.description.iloc[0],  reviews.description.loc[0],  reviews.description[0] all return the same result

#######################
#Some summary statistics can be found in pandas

#Describe depends on the values in the feature
reviews.points.describe()
reviews.taster_name.describe()

reviews.points.mean()

#Unique values can also be accessed...
reviews.taster_name.unique()

#and counted
reviews.taster_name.value_counts()

#mapping and lambdas can also be applied
review_points_mean = reviews.points.mean()
reviews.points.map(lambda p: p - review_points_mean)
#The above code remeans the ratings to 0


#Functions can also be applied on each row
def remean_points(row):
  row.points = row.points - review_points_mean
  return row

reviews.apply(remean_points, axis='columns')
#Note that map() and apply() return new, transformed Series and DataFrames, respectively

#Alternate way to remean
reviews.points - review_points_mean

reviews.country + " - " + reviews.region_1




